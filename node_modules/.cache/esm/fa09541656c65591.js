let Joi,Item,bcrypt;_56c‍.x([["default",()=>_56c‍.o]]);_56c‍.w("Joi",[["default",["Joi"],function(v){Joi=v}]]);_56c‍.w("../Model/Item",[["default",["Item"],function(v){Item=v}]]);_56c‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);



const registerController={

 async register(req,res,next){

    const registerSchema= Joi.object({
        
        email:Joi.string().required().email(),
        password:Joi.string().required(),
        reppassword:Joi.ref('password')

    })
           
    const {error}= registerSchema.validate(req.body)
    
    if(error){
        return next(error)
    }


    try{
        const exist = await  Item.exists({email:req.body.email})
   if(exist){
    return next(new Error('Email Id Alrady Exist.'))
   }

    }catch(error){
     return next(error)
    }

   

   const {email,password}=req.body

//    const hasdpassword =  bcrypt.hasd(password,10)
   const hasdPassword = await bcrypt.hash(password,10)
  
   const item = new Item({
    
    email,
    password:hasdPassword,

   })
 
   try{
   item.save()    

      


   }catch(error){
    return next(error)
   }


    res.json(item)




 }


}


_56c‍.d(registerController);